{"pageProps":{"frontmatter":{"autoEqnLabels":false,"autoSectionLabels":false,"ccsDelim":", ","ccsLabelSep":"‚Äî","ccsTemplate":"$$i$$$$ccsLabelSep$$$$t$$","chapDelim":".","chapters":false,"chaptersDepth":1,"codeBlockCaptions":true,"cref":false,"crossrefYaml":"pandoc-crossref.yaml","date":"2022-12-16","eqLabels":"arabic","eqnBlockInlineMath":false,"eqnBlockTemplate":"<table>\n<colgroup>\n<col style=\"width: 90%\" />\n<col style=\"width: 10%\" />\n</colgroup>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: center;\"><span\nclass=\"math display\"><em>t</em></span></td>\n<td style=\"text-align: right;\"><span\nclass=\"math display\"><em>i</em></span></td>\n</tr>\n</tbody>\n</table>\n","eqnIndexTemplate":"($$i$$)","eqnInlineTemplate":"$$e$$$$equationNumberTeX$${$$i$$}","eqnPrefix":["eq.","eqns."],"eqnPrefixTemplate":"$$p$$¬†$$i$$","equationNumberTeX":"\\qquad","figLabels":"arabic","figPrefix":["fig.","figs."],"figPrefixTemplate":"$$p$$¬†$$i$$","figureTemplate":"$$figureTitle$$ $$i$$$$titleDelim$$ $$t$$","figureTitle":"Figure","lastDelim":", ","linkReferences":false,"listings":false,"listingTemplate":"$$listingTitle$$ $$i$$$$titleDelim$$ $$t$$","listingTitle":"Listing","listItemTitleDelim":".","lofItemTemplate":"$$lofItemTitle$$$$i$$$$listItemTitleDelim$$ $$t$$  \n","lofTitle":"# List of Figures\n","lolItemTemplate":"$$lolItemTitle$$$$i$$$$listItemTitleDelim$$ $$t$$  \n","lolTitle":"# List of Listings\n","lotItemTemplate":"$$lotItemTitle$$$$i$$$$listItemTitleDelim$$ $$t$$  \n","lotTitle":"# List of Tables\n","lstLabels":"arabic","lstPrefix":["lst.","lsts."],"lstPrefixTemplate":"$$p$$¬†$$i$$","metaDesc":"An introduction to programming with the goal of implementing an AI that will compete in the developer game Battlesnake","metaImg":"https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fblog.battlesnake.com%2Fcontent%2Fimages%2F2021%2F06%2FMediumSocial-1.png&f=1&nofb=1","metaTitle":"Introduction to programming with snake AI","nameInLink":false,"numberSections":false,"pairDelim":", ","rangeDelim":"-","refDelim":", ","refIndexTemplate":"$$i$$$$suf$$","secHeaderDelim":null,"secHeaderTemplate":"$$i$$$$secHeaderDelim[n]$$$$t$$","secLabels":"arabic","secPrefix":["sec.","secs."],"secPrefixTemplate":"$$p$$¬†$$i$$","sectionsDepth":0,"subfigGrid":false,"subfigLabels":"alpha a","subfigureChildTemplate":"$$i$$","subfigureRefIndexTemplate":"$$i$$$$suf$$ ($$s$$)","subfigureTemplate":"$$figureTitle$$ $$i$$$$titleDelim$$ $$t$$. $$ccs$$","tableEqns":false,"tableTemplate":"$$tableTitle$$ $$i$$$$titleDelim$$ $$t$$","tableTitle":"Table","tags":["wip","battlesnake","tutorial","beginner/novice","ai"],"tblLabels":"arabic","tblPrefix":["tbl.","tbls."],"tblPrefixTemplate":"$$p$$¬†$$i$$","title":"Intro to programming: implementing a snake AI üêç","titleDelim":":"},"content":"\n\\[\\[toc\\]\\]\n\n## Introduction\n\nIn this guide I‚Äôll walk you through concepts of programming and\napplication development by example of an AI that will play the game\n[Battlesnake](https://play.battlesnake.com/). The aim of this tutorial\nis to help you step beyond the ‚Äòprogramming a calculator‚Äô phase. You\nknow what language you want to learn, have a grasp of basic syntax and\nknow how logic in programming works (e.g.¬†if statements). But what now?\nWell, writing an AI :sunglasses:. We will cover:\n\n- problem representation and solving\n- version control with [git](https://git-scm.com) and\n  [GitHub](https://www.github.com)\n- some high-level concepts regarding web services and\n  [APIs](https://en.wikipedia.org/wiki/API)\n- setting up a server with [Heroku](https://www.heroku.com)\n\nBattlesnake is a great place to start from. Firstly, because it touches\nupon a lot of different concepts in software development. Secondly, your\nAI will battle against that of other people and there are leaderboards\nto show you how well it performs. This means that you can see your snake\nimprove with your programming abilities!\n\nI can hear you ask: ‚ÄúGreat, but what language are we gonna be\nprogramming in?‚Äù. Since we are essentially creating a\n[web](https://en.wikipedia.org/wiki/Web_service)\nservice\\](<https://en.wikipedia.org/wiki/Web_service>), you can do this\nin any language you want! The Battlesnake devs and the community have\ncreated some [starter\nprojects](https://docs.battlesnake.com/references/starter-projects)\nwhich will help you get started in minutes. If you language is in there,\ngreat! Otherwise, don‚Äôt worry. I‚Äôll be explaining everything in\n[Go](https://go.dev/), but the concepts are the same so you can follow\nalong in any language. I understand it might be confusing to understand\nwhat is language-specific and what isn‚Äôt, so I‚Äôll make sure keep\nconcepts and implementation separate.\n\n### Prerequisites\n\nThe tutorial assumes that you are a beginner, but that you have some\nbasic knowledge about programming. More specifically, you\n\n- **have an environment** in which you can write and run code (i.e.¬†an\n  IDE)\n- **know how use logic** in you programming language of choice\n  (e.g.¬†if-statements)\n- know how to use any of: **classes/objects/structs** (if you language\n  supports those)\n- **have made a couple of small practice projects** (not necessary, but\n  highly recommended for fluency)\n\nIf some of these don‚Äôt apply to you, I would highly encourage you to\npick up a basic course on [codecademy](https://www.codecademy.com/) or\nfollow some tutorials on youtube. Create your first couple of little\nprojects, and then come back! Do feel free to keep on looking, maybe\nyou‚Äôre a lot smarter than you (or I) think you are.\n\n### Structure\n\nWe will cover a wide range of topics, so I will try to keep the\nstructure as consistent and easy to follow as possible. Like mentioned\nbefore, while I will be using Go to illustrate examples, I will try to\nkeep all language-dependent parts separate.\n\nFirst, I‚Äôll introduce the game, Battlesnake, rules and the different\ntools we‚Äôll need. Then we‚Äôll touch upon web services and APIs; how our\napplication will communicate with the Battlesnake server. Following\nthat, I‚Äôll introduce software to manage different versions of your code,\nand a platform to upload your code to. Finally, we will spin up a server\nwhich will use the code we‚Äôve uploaded previously to run our snake on!\n\nYou are, of course, free to stop at any moment and resume at a later\ndate. Actually, I highly encourage this! Take breaks regularly,\nespecially if things don‚Äôt seem to work when they should‚Ä¶ :bug:. We‚Äôll\ncover a lot of material, so buckle up, grab some snacks, and let‚Äôs get\ngoing :rocket:!\n\n## Battlesnake\n\n> Battlesnake is a multi-player programming game played by developers\n> all over the world. All you need to play is a live web server that\n> implements the Battlesnake API.\n>\n> ‚Äî‚Äáplay.battlesnake.com\n\n[Battlesnake](https://play.battlesnake.com/) is a developer-oriented\ngame, meaning that everything in, about, and around the game is made by\ndevelopers, for developers. This means that there are a lot of resources\nout there that can help us out. Best example is, of course, the original\n[Battlesnake documentation](https://docs.battlesnake.com/), which I\nencourage you to read and refer to whenever you‚Äôre lost before trying to\n*DuckDuck Go* it.\n\n### How Battlesnake works\n\nThe Battlesnake game rules are simple. In the default game mode, the\ngoal is to be the last-snake-standing among a group of three other\nsnakes. Besides that, the normal rules of snake apply:\n\n1.  don‚Äôt run into walls\n2.  don‚Äôt run into snakes (you and others)\n3.  eating food makes you grow :apple:\n\nThere are some other edge-cases to consider (e.g.¬†what do you do when\nheads collide), but these don‚Äôt matter much for our purposes. Please\nrefer to the official documentation if you want to learn more.\n\n### Creating our first snake\n\nEnough talking! Let‚Äôs create a snake! To do this, we‚Äôll first need to\ncreate an account. One option is to create an account with GitHub.\nChoose this one. Like mentioned before, we‚Äôll use this platform to host\nour code, so we need an account for that anyway. [Create an\naccount](https://github.com/signup) for GitHub, then head over to\nBattlesnake to [create an account](https://play.battlesnake.com/login/)\nand select the **Sign in with GitHub** button.\n\nAwesome, now we can head over to Battlesnake to [create a new\nsnake](https://play.battlesnake.com/account/snakes/create/). Give it a\nname (I name my snakes after Lord of the Rings characters)! And‚Ä¶ Huh? A\nURL? Yes, a URL. This is where the fun begins. For now we‚Äôll cancel,\nsince the URL is a required field, but head to next section and I‚Äôll\nexplain what‚Äôs going on.\n\n### How Battlesnake *actually* works\n\nThe reason why we need to provide a URL when creating a snake, is\nbecause the snake is essentially a [web\nservice](https://en.wikipedia.org/wiki/Web_service). I briefly mentioned\nthis in the introduction, but now I‚Äôll elaborate on what that actually\nmeans.\n\nTo put it concretely, our snake will run on its own remote computer\n(server), the Battlesnake game server will send us the current state of\nthe game (location of all the snake, food, size of the field, etc.) and\nask us what our next move is. We then send a response (indicated\n`{response}` in the diagram), this simply contains the action: ‚Äúup‚Äù,\n‚Äúdown‚Äù, ‚Äúleft‚Äù, or ‚Äúright‚Äù. But for the Battlesnake server to reach us\nwe to tell it our location, the URL. If you would this manually, this is\nthe equivalent of typing the URL, let‚Äôs say `my-awesome-snake.dev`, and\nappending `/move` to it, giving us `my-awesome-snake.dev/move`. This is\nwhat we call an\n[endpoint](https://en.wikipedia.org/wiki/Communication_endpoint). There\nis also a endpoint for indicating that we want to start to game, which\nwould be `my-awesome-snake.dev/start`. And one for ending the game,\n`/end`. You get the idea.\n\n<figure>\n<img\nsrc=\"/images/post/intro-to-programming-battlesnake/transaction-diagram.svg%20%22Transaction%20diagram%20of%20the%20requests%20and%20responses%20made%20during%20a%20Battlesnake%20game.%20Here%20to%20the%20endpoints%20%60/start%60,%20%60/move%60,%20and%20%60/end%60%22\"\nalt=\"transaction diagram\" />\n<figcaption aria-hidden=\"true\">transaction diagram</figcaption>\n</figure>\n\nAs you can imagine, there is no real need to send any info back to the\nBattlesnake server when it send a web-request to our snake on `/end`,\ntelling it to end the game. But we do definitely need to send a response\nwhen we‚Äôve been asked to make a move. Just like we really need to\nreceive some information about the game, for example, what moves the\nothers have made. The specification for what type of requests we need to\nhandle (does the request contain information? Do we need to send\nanything back; give a response?), as well as the format that the\ninformation is in (e.g.¬†a two-dimensional array representing the board)\nis called an [Application Programming Interface, or\nAPI](https://en.wikipedia.org/wiki/API).\n\nHaving an API is great, because it means that **two programs can\ncommunicate, without them needing to know exactly how the other works**.\nSince the only import thing is that they know what to expect when they\nask the other something. Just as they know what to provide in order to\nmake sure the other can successfully perform their required task. This\nis exactly the reason why you should be able to program in any language\nyou want! **As long as you adhere to the API specification, you can\nimplement your snake in anything you want**.\n\nOf course, the Battlesnake documentation also [contains a specification\nfor the API of the snake](https://docs.battlesnake.com/references/api).\nGo and see if you can find the endpoints mentioned before. There is\nactually one more endpoint I didn‚Äôt mention, try to see if you can find\nit and figure out what it does!\n\n## Getting the server running\n\nAll right, this is where most of the work is gonna take place, so I‚Äôll\njust tell you right now what to expect and how we‚Äôre gonna do it. First,\nwe‚Äôll take one of the beginner projects that I‚Äôve mentioned before. All\nof them are on GitHub, and with just one button we can have our own\nversion of such a so-called **template** to work with. Then, we‚Äôll make\nsure we have a local version of that code. This is done with git, which\nI‚Äôll also introduce then (in short, it allows us to keep track of\ndifferent versions of our code and lets us sync our local version with a\nremote one, in our case GitHub). Once we‚Äôve got that going, we will look\nat Heroku. This is a service that will host our code on a publicly\naccessible URL, which will allow us to create our first snake! Once all\nof this is set up we will be able to start programming our snake logic.\nWith that said, let‚Äôs get going!\n\n### Creating your first repository\n\nGoing back to the [starter\nprojects](https://docs.battlesnake.com/references/starter-projects),\nclick on the one that you would like to use. This should bring you to\nGitHub, where you will click the big green button saying ***‚ÄúUse this\ntemplate‚Äù***. Give it a name, keep it public, and click ***‚ÄúCreate\nrepository from template‚Äù***. Congratulations! You have made your first\nrepository :partying_face:! ‚ÄúBut what is a repository?‚Äù, I can hear you\nask. Well, let me explain.\n\n#### Git primer\n\nA repository is a folder in which [git]() tracks changes in order to\norganize the history of your code. And what is git? Well, it simply is a\ntool to organize the history, or, the different versions of you code, a\n[Version Control System, or VCS](). It allows you to **commit** changes\nin batches, and requires you to title and describe each of these\nbatches, or **commits**. Now, let‚Äôs say you would like to see if a\nparticular feature would work well. You don‚Äôt want to accidentally break\nyour precious program, so you **branch** off to a different version. In\nthis new branch, you write your code and continue to make commits. You\nare a great programmer, so your feature turns out to be a great addition\nto the existing program! Now you can **merge** the new feature branch\nwith the **main** (from which we‚Äôve originally branched off) one.\n\n<figure>\n<img\nsrc=\"/images/post/intro-to-programming-battlesnake/git-history-diagram.svg%20%22An%20example%20of%20a%20git%20history%20tree.%20After%20the%20first%20commit%20on%20the%20%60main%60%20branch,%20a%20new%20feature%20is%20tested%20on%20a%20new%20branch.%20In%20the%20merge,%20the%20commits%20made%20to%20the%20%60new-feature%60%20branch%20are%20applied%20to%20the%20%60main%60%20branch.%22\"\nalt=\"git history diagram\" />\n<figcaption aria-hidden=\"true\">git history diagram</figcaption>\n</figure>\n\nGitHub comes in when you would like to work together with other people\n(or just have a non-local backup). It is simply a repository stored on\nthe GitHub servers. If you want to edit code on a repository you would\nfirst **clone** the repository to you local machine. In this local\nversion you would keep track of your changes like normal, commit similar\nbatches of changes and branching if need be. At any point, you can\nchoose to **push** your changes to the **remote** repository on GitHub.\nThis is why it is important to always **pull** before starting to code\non a collaborative project, since someone might have changed the same\ncode you want to work on. If you don‚Äôt do this, you might encounter\n**conflicts** when you want to push the changes you made to the remote.\n\n#### Working with git\n\nNow, there are a couple of different options in with regard to\nperforming these actions on a local version of your new repository.\nThere are applications with a **graphical user interface (GUI)** such as\n\n- [GitHub Desktop](https://desktop.github.com/) - easiest to use in\n  combination with GitHub\n- [GitKraken](https://www.gitkraken.com/) - has a *ton* of features\n- [and many more‚Ä¶](https://git-scm.com/downloads/guis)\n\nPersonally, I like using the command line ([git\nbash](https://git-scm.com/downloads) for Windows) to use git. If you\ndon‚Äôt have any experience using a **command line interface (CLI)**, I\nsuggest you take one of the options that includes a GUI. I, however,\nwill be giving explaining what to do using command line instructions.\nWhich would looks something like this\n\n``` bash\ngit add changed_file.go\ngit commit -m \"Commit #1\"\n```\n\nHere, I‚Äôm adding all my changes from a file called `changed_file.go`,\nand then committing them in a new commit called *Commit \\#1*. If you\nwould like to know how to do that in your git application of choice,\nsimply *DuckDuck Go* something along the lines of *‚Äúhow to add on GitHub\nDesktop‚Äù* and *‚Äúhow to commit on Github Desktop‚Äù*. It might be a little\nhard at first, but I believe you‚Äôll learn more about the application and\nhow to work with it if you find the solution yourself.\n\n### Exploring the code base\n\nLet‚Äôs get a little taste of what we‚Äôre gonna be working with and check\nif everything works as it should, before starting to set up our server.\nIn order to check out the code, we could of course go to repository on\nGitHub and browse the code from there. But if we want to make changes,\nwe‚Äôll have to have it locally. So let‚Äôs do that now.\n\n``` bash\n# this will clone the repository <repo> of <username> into the folder <local_repo>\ngit clone git@github.com:<username>/<repo>.git <local_repo>\n```\n\nThis will give us a folder, which we can open with our favorite IDE\n(mine is emacs). All the beginner projects have a similar structure of\nwhich these are the most important files.\n\n    # A wildcard (*) indicates any sort of pattern (e.g. py, go, rs, etc.)\n    - logic.*\n    - main.*\n    - logic_test.*\n\n`main.*` contains the functions that handle the web requests. `logic.*`\ncontains the snake logic; how your snake responds given a game state.\n`logic_test.*` contains some tests for functions defined in `logic.*`.\nIn the next two sections I‚Äôll discuss the code in these files. Again, it\nwill be done in Go, but you should be able to follow in any language\nsince the structure is similar.\n\n#### Web requests\n\nOpening `main.go` file will show a couple of functions and structs. The\nfunctions are for handling web requests, and the structs show how the\ndata should be **parsed** from the incoming web request. All these data\nstructures have to do with the `GameState` that we get from a request at\nthe `/move` endpoint.\n\nWe can see four different handlers:\n\n``` go\nfunc HandleIndex(w http.ResponseWriter, r *http.Request) {\n  [...]\n}\n\nfunc HandleStart(w http.ResponseWriter, r *http.Request) {\n  [...]\n}\n\nfunc HandleMove(w http.ResponseWriter, r *http.Request) {\n  [...]\n}\n\nfunc HandleEnd(w http.ResponseWriter, r *http.Request) {\n  [...]\n}\n```\n\nEach one corresponds to a different end point. Here, `HandleIndex`\ncorresponds to the `/`, or **root**, endpoint. The reason that this is\ncalled `HandleIndex` and not `HandleRoot`, is because when you normally\ntype a URL, for example `duckduckgo.com`, you don‚Äôt actually go to the\nroot. You browser automatically starts looking for a file called\n`index.html` on the corresponding website (i.e.\n`duckduckgo.com/index.html`). In its simplest form, a website is nothing\nmore than a server that serves `html` files. Which is also why `/` is\ncalled the root, because **it is the root of the filesystem of the\nserver**.\n\n#### Trying it out\n\nTo check if the server runs like it should (and it should), you can run\nthe project in whatever IDE you have. In Go, using the command line, it\nwould look like this:\n\n``` bash\ngo run main.go\n```\n\n``` txt\n2022/03/23 21:10:03 Starting Battlesnake Server at http://0.0.0.0:8080...\n```\n\nOpen your browser and type in the URL at the end of the line (or,\n`http://localhost:8080`, they mean the same). If everything works as it\nshould, you should see something like this:\n\n``` json\n{\n  \"apiversion\": \"1\",\n  \"author\": \"cochaviz\",\n  \"color\": \"#488A16\",\n  \"head\": \"beluga\",\n  \"tail\": \"curled\"\n}\n```\n\nThis is the ‚Äòsecret‚Äô endpoint I was hinting at in the previous chapter!\nIt tells us information about who made the snake (me :smile:), what it\nlooks like, and the version of the API. Knowing the version of the API\nis important because it tells you if it even makes sense to interact\nwith the snake any further. If the Battlesnake game server would see a\ndifferent API version, it would probably not interact any further (maybe\nshow you an error when creating the snake) in order to avoid possible\nerrors.\n\nThis is essentially what the Heroku server will do. It will take the\ncode from GitHub and run it. The only difference is that the URL will be\ndifferent than `http://0.0.0.0:8080`. This address is actually only\naccessible from your computer (hinted to by `localhost`) in order to\nmake sure no malicious users could gain access to your computer.\nTechnically you *could* host it yourself (and once you know a little bit\nmore about networking and hosting I would highly encourage you to do\nso!), but for now Heroku is the simplest *and* safest option.\n\n#### Snake logic\n\nHaving a look in the `logic.go` shows only a couple of functions, but a\nlot of comments. This is where most of the magic will happen, at least,\nin the beginning. Once you make your snake more complex, you will\ninevitably restructure your project. But, it is a nice place to start\nfrom. Let‚Äôs have a look together, but do make sure to read through the\ncomments first to see if you understand what they are supposed to do.\n\n``` go\n// This function is called when you register your Battlesnake on play.battlesnake.com\n// See https://docs.battlesnake.com/guides/getting-started#step-4-register-your-battlesnake\n// It controls your Battlesnake appearance and author permissions.\n// For customization options, see https://docs.battlesnake.com/references/personalization\n// TIP: If you open your Battlesnake URL in browser you should see this data.\nfunc info() BattlesnakeInfoResponse {\n  [...]\n}\n\n// This function is called everytime your Battlesnake is entered into a game.\n// The provided GameState contains information about the game that's about to be played.\n// It's purely for informational purposes, you don't have to make any decisions here.\nfunc start(state GameState) {\n  [...]\n}\n\n// This function is called when a game your Battlesnake was in has ended.\n// It's purely for informational purposes, you don't have to make any decisions here.\nfunc end(state GameState) {\n  [...]\n}\n\n// This function is called on every turn of a game. Use the provided GameState to decide\n// where to move -- valid moves are \"up\", \"down\", \"left\", or \"right\".\n// We've provided some code and comments to get you started.\nfunc move(state GameState) BattlesnakeMoveResponse {\n  [...]\n\n // Step 0: Don't let your Battlesnake move back in on it's own neck\n\n  [...]\n\n // TODO: Step 1 - Don't hit walls.\n\n // TODO: Step 2 - Don't hit yourself.\n\n // TODO: Step 3 - Don't collide with others.\n\n // TODO: Step 4 - Find food.\n\n // TODO: Step 5 - Select a move to make based on strategy, rather than random.\n  \n  [...]\n}\n```\n\n### Making a web service with Heroku\n\n> Just guiding the reader through the process of working with Heroku\n\n## Programming the snake\n\n> Actually starting to do some programming\n\n### Making the snake beautiful\n\n> Customize info and show how changes propagate through the whole\n> pipeline\n\n### Making the snake not stupid\n\n> Get through the basic challenges\n\n### Making the snake smart\n\n> Getting food, and some heuristics\n\n## Beyond this tutorial\n\n> Give some ideas on how to continue\n\n### CI/CD\n\n> Creating a pipeline using a CI/CD tool to check if the snake will\n> actually run\n\n### Tree snakes\n\n> Small teaser to tree-traversal and the potentials of a better snake\n"},"__N_SSG":true}