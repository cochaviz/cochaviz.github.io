{"pageProps":{"frontmatter":{"author":"Zohar Cochavi","autoEqnLabels":false,"autoSectionLabels":false,"ccsDelim":", ","ccsLabelSep":"—","ccsTemplate":"$$i$$$$ccsLabelSep$$$$t$$","chapDelim":".","chapters":false,"chaptersDepth":1,"codeBlockCaptions":true,"cref":false,"crossrefYaml":"pandoc-crossref.yaml","date":"2023-11-06","eqLabels":"arabic","eqnBlockInlineMath":false,"eqnBlockTemplate":"<table>\n<colgroup>\n<col style=\"width: 90%\" />\n<col style=\"width: 10%\" />\n</colgroup>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: center;\"><span\nclass=\"math display\"><em>t</em></span></td>\n<td style=\"text-align: right;\"><span\nclass=\"math display\"><em>i</em></span></td>\n</tr>\n</tbody>\n</table>\n","eqnIndexTemplate":"($$i$$)","eqnInlineTemplate":"$$e$$$$equationNumberTeX$${$$i$$}","eqnPrefix":["eq.","eqns."],"eqnPrefixTemplate":"$$p$$ $$i$$","equationNumberTeX":"\\qquad","figLabels":"arabic","figPrefix":["fig.","figs."],"figPrefixTemplate":"$$p$$ $$i$$","figureTemplate":"$$figureTitle$$ $$i$$$$titleDelim$$ $$t$$","figureTitle":"Figure","lastDelim":", ","linkReferences":false,"listings":false,"listingTemplate":"$$listingTitle$$ $$i$$$$titleDelim$$ $$t$$","listingTitle":"Listing","listItemTitleDelim":".","lofItemTemplate":"$$lofItemTitle$$$$i$$$$listItemTitleDelim$$ $$t$$  \n","lofTitle":"# List of Figures\n","lolItemTemplate":"$$lolItemTitle$$$$i$$$$listItemTitleDelim$$ $$t$$  \n","lolTitle":"# List of Listings\n","lotItemTemplate":"$$lotItemTitle$$$$i$$$$listItemTitleDelim$$ $$t$$  \n","lotTitle":"# List of Tables\n","lstLabels":"arabic","lstPrefix":["lst.","lsts."],"lstPrefixTemplate":"$$p$$ $$i$$","nameInLink":false,"numberSections":false,"pairDelim":", ","rangeDelim":"-","refDelim":", ","refIndexTemplate":"$$i$$$$suf$$","secHeaderDelim":null,"secHeaderTemplate":"$$i$$$$secHeaderDelim[n]$$$$t$$","secLabels":"arabic","secPrefix":["sec.","secs."],"secPrefixTemplate":"$$p$$ $$i$$","sectionsDepth":0,"subfigGrid":false,"subfigLabels":"alpha a","subfigureChildTemplate":"$$i$$","subfigureRefIndexTemplate":"$$i$$$$suf$$ ($$s$$)","subfigureTemplate":"$$figureTitle$$ $$i$$$$titleDelim$$ $$t$$. $$ccs$$","tableEqns":false,"tableTemplate":"$$tableTitle$$ $$i$$$$titleDelim$$ $$t$$","tableTitle":"Table","tags":["first","reverse-engineering","wip"],"tblLabels":"arabic","tblPrefix":["tbl.","tbls."],"tblPrefixTemplate":"$$p$$ $$i$$","title":"Baby’s First Reverse Engineering","titleDelim":":"},"content":"\n\\[\\[ toc \\]\\]\n\n## Introduction\n\nA little while ago, my dad came to me with the request whether I would\nbe able to crack some long-forgotten abandon-ware. As it happened, I had\nbinged just about all of\n[jeFF0Falltrades](https://www.youtube.com/@jeFF0Falltrades)’s content\nwhich, together with a healthy dose of youthful over-confidence, made me\njust about the only person who could solve this little challenge. Not\nthat I am well-equipped or any way more qualified than many other people\nin the field of reverse engineering, I just didn’t tell them about the\nchallenge. **Don’t be the best, be the first**.\n\nFirst, I should explain what we are exactly going to do, and why I would\nconsider cracking this software ethical. Then, I will walk you through\nthe different paths I took, both successful and unsuccessful. As I don’t\nknow much about reverse engineering but am very interested in it, I\nthink this might be useful for anyone who, too, is interested but does\nnot have much knowledge. With that said, I will cut the talk and show\nhow I solved this, admittedly simple, challenge.\n\n## The Prompt and the Ethics\n\nThe program my dad worked with is an executable that takes geometric\ndata regarding a ship and allows you to modify it in some particular\nways. I won’t pretend like I know exactly why it’s useful, but he deemed\nit very much so. The program itself is from about 2009 and the installer\nwill only complete when run in Windows Vista compatibility mode. Long\nstory short, there is nothing to be found about this software online and\nthe only reason it has not disappeared from the face of the earth is my\nfather’s questionable but meticulous back-up methodology. Sadly, though,\nthe backup was not meticulous enough and the license to use the program\ngot lost.\n\nInstalling the program for the first time shows the following window.\n\n<figure id=\"fig:first_run\">\n<img\nsrc=\"/images/post/babys-first-reverse-engineering/validate_this_installation.png\"\nalt=\"A program window showing that there are 7 free runs left.\" />\n<figcaption>Figure 1: A program window showing that there are 7 free\nruns left.</figcaption>\n</figure>\n\nClearly, we can run this program and use it fully without a license. The\nproblem is that we can only use this 7 times, after which we get the\nfollowing message.\n\n<figure id=\"fig:no_more_free_runs\">\n<img\nsrc=\"/images/post/babys-first-reverse-engineering/no_more_free_runs.png\"\nalt=\"A program window showing that we are out of free runs and have to validate the program.\" />\n<figcaption>Figure 2: A program window showing that we are out of free\nruns and have to validate the program.</figcaption>\n</figure>\n\nThe keen-eyed among you, might have already guessed that it has to keep\ntrack of these free runs or trails, based on some process-independent\nstate, i.e. it has to write it to some file. If we can find a way to\nmanipulate this state or its processing, we can crack the software.\n\nStill, cracking is generally considered unethical because it directly\ninterferes with the monetary interests of the software developer who\nwrote the program. In this case, we could make the argument that my dad\nsimply lost the key and should therefore be allowed to use the program.\nStill, you might say that publicizing a write-up like this goes further\nthan just allowing a person who bought the software to get what they\npaid for. In which case I would say: “Good point!”.\n\nIn this case, however, I wouldn’t consider the monetary interests of the\nauthor relevant anymore because the software is not publicly available\nor sold anywhere. Therefore, cracking this software shouldn’t be\nconsidered unethical. Additionally, I’m only publicizing *how* to crack\nthis software, not distributing a cracked version of this software. So\nanyone thinking that copyright might be an issue need not worry.\n\nIf there is anyone that still thinks this is in some way not justified,\nplease let me know. I love a great discussion.\n\n## Cracking\n\nThe goal of this challenge is therefore to somehow use the free trails\nto crack the program and provide my dear old father with his equally\nancient software (love you).\n\n### Registry Files and Procmon (Attempt)\n\nMy first thought was to use\n[procmon](https://learn.microsoft.com/en-us/sysinternals/downloads/procmon)\nto monitor the behavior of the executable and look for any interesting\nregistries that are written to. To do this, we launch procmon, open the\n*Process Tree*, and filter on our program of interest `GFMv6.exe` and\nits possible children.\n\n<figure id=\"fig:procmon_pt\">\n<img\nsrc=\"/images/post/babys-first-reverse-engineering/procmon_process_tree.png\"\nalt=\"Procmon Process Tree. Highlighted is the program we’re looking for. Using ‘Include Subtree’, we can include and apply a filter such that we only monitor this Process ID (PID) and any other processes it spawns.\" />\n<figcaption>Figure 3: Procmon Process Tree. Highlighted is the program\nwe’re looking for. Using ‘Include Subtree’, we can include and apply a\nfilter such that we only monitor this Process ID (PID) and any other\nprocesses it spawns.</figcaption>\n</figure>\n\nWe can then return to the main procmon screen and select only the\nregistry operations button. We have to make sure procmon is started and\nrecording *before* we start the program.\n\n<figure id=\"fig:procmon_reg\">\n<img\nsrc=\"/images/post/babys-first-reverse-engineering/procmon_registries.png\"\nalt=\"Registries observed by procmon for GFMv6.exe. Notice the bar on the top-right where you can filter to show only registry operations.\" />\n<figcaption>Figure 4: Registries observed by procmon for\n<code>GFMv6.exe</code>. Notice the bar on the top-right where you can\nfilter to show only registry operations.</figcaption>\n</figure>\n\nI’ll spare you the details, but I spent some time looking through all\nthe registries that are written to, specifically filtering on events\nthat happened after initially opening the prompt shown in fig. 1. This\nway, we should be able to see any registry files that are updated after\nselecting **No**, but to no avail.\n\nEven though it’s a very manual process, it’s not complicated; don’t let\nlow-hanging fruit go to waste. Furthermore, I guess there might be a\nmethod of exporting the results from procmon to a csv and checking what\nthe differences are in the contents of the registries between one run\nand another. If these trails were saved in some registry, the difference\nshould should be pretty obvious assuming the runs were saved in\nplaintext.\n\n### Brute-Forcing and Guessing (Attempt)\n\nThen, onto the meat of the matter: Let’s open Ghidra! I did, however,\nrealize that there is no sense in just opening the program without some\nsort of hook from where I would be able to determine what is going on.\nThe thing is that the prompt in fig. 1 somehow reads the number of\ntrails left while the sentence “full uses of this program before\nvalidation is required” remains the same. So let’s go with that for now.\n\nCreate a new project in Ghidra and import the file (shortcut: `I`,\nfig. 5). With more exotic programs or when analyzing firmware, you might\nhave to define some options. Here, we just go with the defaults.\n\n<figure id=\"fig:ghidra_import\">\n<img\nsrc=\"/images/post/babys-first-reverse-engineering/ghidra_import.png\"\nalt=\"Ghidra importing an executable. In this case, we just leave it as default. Do, however, have a look in the options! It can be surprising what kind of stuff you need to know to successfully decompile a binary.\" />\n<figcaption>Figure 5: Ghidra importing an executable. In this case, we\njust leave it as default. Do, however, have a look in the options! It\ncan be surprising what kind of stuff you need to know to successfully\ndecompile a binary.</figcaption>\n</figure>\n\nThen, Ghidra will as whether we would like to analyze the file. We\nabsolutely do, otherwise, a 1-day project might turn into a 1-year\nproject.\n\n<figure id=\"fig:ghidra_analysis\">\n<img\nsrc=\"/images/post/babys-first-reverse-engineering/ghidra_analysis.png\"\nalt=\"Analyzing Ghidra, just let it do its thing. If you know you’re using a WindowsPE app, it could be benefitial to tick the corresponding box. This will propagate the argument names as defined in the documentation to the rest of the program\" />\n<figcaption>Figure 6: Analyzing Ghidra, just let it do its thing. If you\nknow you’re using a WindowsPE app, it could be benefitial to tick the\ncorresponding box. This will propagate the argument names as defined in\nthe documentation to the rest of the program</figcaption>\n</figure>\n\nThen, we search for the string as mentioned before by selecting\n`Search > For Strings...` in the menu bar. When we enter “full uses” we\nimmediately get the result we’re looking for!\n\n<figure id=\"fig:ghidra_search_string\">\n<img\nsrc=\"/images/post/babys-first-reverse-engineering/ghidra_search_strings.png\"\nalt=\"String search in Ghidra showing the results for the search “full uses”. This will only show strings as defined in the program (probably all in the .data section, but I’m not sure). If you’re looking for functions, variable names, or comments, you should use Search &gt; Program Text.\" />\n<figcaption>Figure 7: String search in Ghidra showing the results for\nthe search “full uses”. This will only show strings as defined in the\nprogram (probably all in the <code>.data</code> section, but I’m not\nsure). If you’re looking for functions, variable names, or comments, you\nshould use <code>Search &gt; Program Text</code>.</figcaption>\n</figure>\n\nDouble-clicking the string will redirect us to the place where the\nstring is located in the `.data` section. Luckily there is only one\ncross-reference (denoted by the `XREF` tag/comment) to this string,\nwhich we double click to got to. After letting Ghidra do it magic, we’re\nleft with the following if-statement in which the string is used:\n\n``` cpp\n// [...]\n  if (0.0 < local_1c) {\n    __vbaStrCat(L\"You have \",local_18);\n    uVar8 = (*pcVar11)();\n    __vbaStrR4(local_1c);\n    uVar10 = (*pcVar11)(uVar8);\n    __vbaStrCat(uVar10,uVar8);\n    uVar8 = (*pcVar11)();\n    __vbaStrCat(L\" full uses of this program before validation is required.  Select No to use this f ree full use now, or Cancel to exit.\"\n                ,uVar8);\n    uVar8 = (*pcVar11)();\n    rtcBstrFromAnsi(0xd);\n    uVar10 = (*pcVar11)(uVar8);\n    __vbaStrCat(uVar10,uVar8);\n    uVar8 = (*pcVar11)();\n    rtcBstrFromAnsi(0xd);\n    uVar10 = (*pcVar11)(uVar8);\n    __vbaStrCat(uVar10,uVar8);\n    uVar8 = (*pcVar11)();\n    __vbaStrCat(L\"Validate now?\",uVar8);\n    (*pcVar11)();\n    __vbaFreeStrList(8,&local_30,&local_34,&local_38,&local_3c,&local_40,&local_44,&local_48,\n                     &local_4c);\n  } else {\n    __vbaStrCat(L\"You have used up your free full uses of this program.  Select No to run in demonst ration mode, or Cancel to exit.\"\n                ,local_18);\n    // [...]\n    __vbaStrCat(L\"Validate now?\",uVar8);\n    (*pcVar11)();\n    __vbaFreeStrList(5,&local_30,&local_34,&local_38,&local_3c,&local_40);\n  }\n// [...]\n```\n\nWhile this is great, there are some quirks about this decompilation\nwhich we’ll get to. First, this tells us a couple of things:\n\n1.  This program was probably written in Visual Basic, as denoted by the\n    `vba` prefix before all the functions.\n\n2.  The variable `local_1c` determines whether the number of free uses\n    have passed. This is indicated by `local_1c` being used to determine\n    whether the text “You have `local_1c` full uses left” or “You have\n    used up your free full uses of this program” is shown to the user.\n    Also, the variable is converted to a string from a number in\n    `__vbaStrR4(local_1c)` in between “You have” and “full uses”.\n\n3.  The fact that these strings are built here, probably indicates that\n    this is also where the windows will be built. If that’s the case,\n    this function should therefore be called by some other function\n    which might perform the actual check. But this is definitely more\n    speculation than anything.\n\nThere is something weird happening with the function calls and the\ncomplete lack of return values or pointers as arguments. The assembly\ncode definitely tells us a little more, but is hard to read.\n\n``` asm\n                      LAB_005492d1                                    XREF[1]:     00549262(j)  \n005492d1 68 78 2c        PUSH       u_You_have_00432c78                              = u\"You have \"\n          43 00\n005492d6 ff d7           CALL       EDI=>MSVBVM60.DLL::__vbaStrCat\n005492d8 8b d0           MOV        EDX,EAX\n005492da 8d 4d d4        LEA        ECX=>local_30,[EBP + -0x2c]\n005492dd ff d6           CALL       ESI=>MSVBVM60.DLL::__vbaStrMove\n005492df 8b 4d e8        MOV        ECX,dword ptr [EBP + local_1c]\n005492e2 50              PUSH       EAX\n005492e3 51              PUSH       ECX\n005492e4 ff 15 b4        CALL       dword ptr [->MSVBVM60.DLL::__vbaStrR4]           = 727803a4\n          11 40 00\n005492ea 8b d0           MOV        EDX,EAX\n005492ec 8d 4d d0        LEA        ECX=>local_34,[EBP + -0x30]\n005492ef ff d6           CALL       ESI=>MSVBVM60.DLL::__vbaStrMove\n005492f1 50              PUSH       EAX\n005492f2 ff d7           CALL       EDI=>MSVBVM60.DLL::__vbaStrCat\n005492f4 8b d0           MOV        EDX,EAX\n005492f6 8d 4d cc        LEA        ECX=>local_38,[EBP + -0x34]\n005492f9 ff d6           CALL       ESI=>MSVBVM60.DLL::__vbaStrMove\n005492fb 50              PUSH       EAX\n005492fc 68 4c 2d        PUSH       u__full_uses_of_this_program_befor_00432d4c      = u\" full uses of this program b\n          43 00\n00549301 ff d7           CALL       EDI=>MSVBVM60.DLL::__vbaStrCat\n```\n\n### Finding User Settings (Success)\n\n- Delete `WMG.ini`\n\n### Subtract by Zero (Success)\n\n- Change `FSUB dword ptr [DAT_00401db0]` to `NOP dword ptr 0x00401d`\n\n### Verification Prompt Begone (Success)\n\n## Conclusion\n"},"__N_SSG":true}