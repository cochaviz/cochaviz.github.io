{"pageProps":{"frontmatter":{"autoEqnLabels":false,"autoSectionLabels":false,"ccsDelim":", ","ccsLabelSep":"—","ccsTemplate":"$$i$$$$ccsLabelSep$$$$t$$","chapDelim":".","chapters":false,"chaptersDepth":1,"codeBlockCaptions":true,"cref":false,"crossrefYaml":"pandoc-crossref.yaml","date":"2022-10-19","eqLabels":"arabic","eqnBlockInlineMath":false,"eqnBlockTemplate":"<table>\n<colgroup>\n<col style=\"width: 90%\" />\n<col style=\"width: 10%\" />\n</colgroup>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: center;\"><span\nclass=\"math display\"><em>t</em></span></td>\n<td style=\"text-align: right;\"><span\nclass=\"math display\"><em>i</em></span></td>\n</tr>\n</tbody>\n</table>\n","eqnIndexTemplate":"($$i$$)","eqnInlineTemplate":"$$e$$$$equationNumberTeX$${$$i$$}","eqnPrefix":["eq.","eqns."],"eqnPrefixTemplate":"$$p$$ $$i$$","equationNumberTeX":"\\qquad","figLabels":"arabic","figPrefix":["fig.","figs."],"figPrefixTemplate":"$$p$$ $$i$$","figureTemplate":"$$figureTitle$$ $$i$$$$titleDelim$$ $$t$$","figureTitle":"Figure","lastDelim":", ","linkReferences":false,"listings":false,"listingTemplate":"$$listingTitle$$ $$i$$$$titleDelim$$ $$t$$","listingTitle":"Listing","listItemTitleDelim":".","lofItemTemplate":"$$lofItemTitle$$$$i$$$$listItemTitleDelim$$ $$t$$  \n","lofTitle":"# List of Figures\n","lolItemTemplate":"$$lolItemTitle$$$$i$$$$listItemTitleDelim$$ $$t$$  \n","lolTitle":"# List of Listings\n","lotItemTemplate":"$$lotItemTitle$$$$i$$$$listItemTitleDelim$$ $$t$$  \n","lotTitle":"# List of Tables\n","lstLabels":"arabic","lstPrefix":["lst.","lsts."],"lstPrefixTemplate":"$$p$$ $$i$$","metaDesc":"A writeup for the VulnTraining challenge from ctfchallenge.com","metaImg":"https://ctfchallenge.com/images/ctflogo-trans.png","metaTitle":"CTF Challenge VulnTraining Writeup","nameInLink":false,"numberSections":false,"pairDelim":", ","rangeDelim":"-","refDelim":", ","refIndexTemplate":"$$i$$$$suf$$","secHeaderDelim":null,"secHeaderTemplate":"$$i$$$$secHeaderDelim[n]$$$$t$$","secLabels":"arabic","secPrefix":["sec.","secs."],"secPrefixTemplate":"$$p$$ $$i$$","sectionsDepth":0,"subfigGrid":false,"subfigLabels":"alpha a","subfigureChildTemplate":"$$i$$","subfigureRefIndexTemplate":"$$i$$$$suf$$ ($$s$$)","subfigureTemplate":"$$figureTitle$$ $$i$$$$titleDelim$$ $$t$$. $$ccs$$","tableEqns":false,"tableTemplate":"$$tableTitle$$ $$i$$$$titleDelim$$ $$t$$","tableTitle":"Table","tags":["ctf","web","writeup","wip"],"tblLabels":"arabic","tblPrefix":["tbl.","tbls."],"tblPrefixTemplate":"$$p$$ $$i$$","title":"CTF Challenge VulnTraining Writeup","titleDelim":":"},"content":"\n\\[\\[toc\\]\\]\n\n## A Little Disclaimer\n\nSo you’re looking for answers, are ya? Well, I’ve got them, but for a\nprice… Namely a little bit of your time and attention:\n\n**Please try the challenges yourself before checking the answers.**\n\nCTF’s are notoriously ‘NP’ prone. Once you’ve seen the answer, it’s easy\nto think you could’ve come up with that. There is nothing wrong with\nlooking up answers, but try reflect on why you couldn’t figure it out. I\ntry to explain my thought process as best and brief as possible, but\nfiguring it out yourself is just the best feeling, so please give it\nanother go when you’re reading this! I’ll not include any of the flags\nto avoid people simply copying and pasting them.\n\nAnother note, I create these writeups as if speaking to myself. If my\nmanner of speaking seems a bit odd, you try talking to yourself without\nsounding a little odd.\n\n## Flags\n\nIn this challenge, the name of the game is enumeration. Can’t find a\nflag? More enumeration. When you think you’ve done enough enumeration,\nwhat do you do? That’s right, more enumeration. This one was the first\nin which I really struggled to find all the flags, and it honestly came\ndown to simply not having exhausted all the possible options.\n\nThe order in which I give the flags is definitely not the order in which\nI’ve found them, but, in hindsight, it seems the most logical. Before, I\nwould have said to first have a look at the root of the given domain.\nBut after going through this challenge it seems more sensible to first\ndo some really easy recon (enumerating domains for example) and only\nthen have a manual look around. Honestly, even while writing this, I am\nnot sure if this generalizes well, but I’ll leave it in anyway. Take\nthis perspective with a grain of salt.\n\n### Digging Around (Enumeration)\n\nFirst, simple recon of all the different subdomains. The best thing here\nis to start with the places which will give you the quickest results,\nsimply because there is so much.\n\n``` console\n$ dnsrecon -d vulntraining.co.uk -D <path_to_wordlists>/subdomains.txt -t brt\n\n[...]\n[+]     A admin.vulntraining.co.uk 68.183.255.206\n[+]     A billing.vulntraining.co.uk 68.183.255.206\n[+]     A www.vulntraining.co.uk 68.183.255.206\n[...]\n```\n\nAnother source of useful information (which I of course forgot about) is\n[crt.sh](https://crt.sh). This will use OSINT to find certificates\nassociated with the given domain. Therefore, it is a lot quicker than\nbrute-force alternatives (such as `dnsrecon`). This gives us another\ndomain: `c867fc3a.vulntraining.co.uk`, which contains the first flag.\n\n### Enum Enum Tu Tuuu Tu-Du Du (Enumeration)\n\nReturning to enumeration, let’s see what the different domains contain.\nHaving a quick look at the roots of each gives a good indication which\none we should prioritize (i.e. run first). Both `admin` and `billing`\nshow a login screen, while `www` gives us the ‘normal’ web-page. My\nguess is that there is more to see in the `www` page, so let’s `ffuf`\nthat first.\n\n``` console\n$ ffuf -w <path_to_wordlists>/content.txt -t 1 -p .1 -H \"Cookie: ctfchallenge=<your_ctf_cookie>\" -recursion -recursion-depth 1 -u http://www.vulntraining.co.uk/FUZZ\n\n[...]\n.git                    [Status: 403, Size: 170, Words: 5, Lines: 7, Duration: 25ms]\n.git/HEAD               [Status: 200, Size: 23, Words: 2, Lines: 2, Duration: 27ms]\n.git/config             [Status: 200, Size: 288, Words: 19, Lines: 12, Duration: 25ms]\n.git/index              [Status: 200, Size: 1381, Words: 8, Lines: 7, Duration: 25ms]\ncss                     [Status: 301, Size: 178, Words: 6, Lines: 8, Duration: 24ms]\n[INFO] Adding a new job to the queue: http://www.vulntraining.co.uk/css/FUZZ\nframework               [Status: 301, Size: 178, Words: 6, Lines: 8, Duration: 23ms]\n[INFO] Adding a new job to the queue: http://www.vulntraining.co.uk/framework/FUZZ\njs                      [Status: 301, Size: 178, Words: 6, Lines: 8, Duration: 27ms]\n[INFO] Adding a new job to the queue: http://www.vulntraining.co.uk/js/FUZZ\nrobots.txt              [Status: 200, Size: 42, Words: 3, Lines: 2, Duration: 26ms]\nserver                  [Status: 302, Size: 3263, Words: 1457, Lines: 109, Duration: 26ms]\n[...]\n```\n\nNow it’s just a matter of systematically going through all the different\nresults and seeing what they give. I’ll quickly list the different\nplaces where we can find flags and how they are otherwise interesting.\n\n#### \\[www\\] /\n\nThe root of the website shows an image and a *Home* button which doesn’t\nlead anywhere. No forms, no user input, nada. Looking at the `<header>`\ntag in the source code gives the second *FLAG*.\n\n#### \\[www\\] robots.txt\n\nOpening `robots.txt` shows us\n\n#### \\[www\\] server\n"},"__N_SSG":true}